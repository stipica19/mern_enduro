{"version":3,"file":"static/js/495.0c1f705d.chunk.js","mappings":"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","sources":["components/ToastBar.js","components/Map.js","pages/Contact.js","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/validateParams.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/init/init.js","../node_modules/@emailjs/browser/es/methods/send/send.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js"],"sourcesContent":["import React, { useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst ToastBar = forwardRef((props, ref) => {\r\n  const [showSnackbar, setShowSnackbar] = useState(false);\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    show() {\r\n      setShowSnackbar(true);\r\n      setTimeout(() => {\r\n        setShowSnackbar(false);\r\n      }, 3000);\r\n    },\r\n  }));\r\n\r\n  return (\r\n    <div\r\n      className=\"toast-bar\"\r\n      id={showSnackbar ? \"show\" : \"hide\"}\r\n      style={{\r\n        backgroundColor: props.notification.success ? \"#3fff14\" : \"#FF0033\",\r\n      }}\r\n    >\r\n      <div className=\"message\">{props.notification.message}</div>\r\n      <div className=\"symbol\">\r\n        <div className=\"line\"></div>\r\n        <div className=\"line\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default ToastBar;\r\n","/* eslint-disable jsx-a11y/iframe-has-title */\r\n/* eslint-disable react/jsx-no-comment-textnodes */\r\nimport React from \"react\";\r\n\r\nconst Map = () => (\r\n  <iframe\r\n    src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2340.0423321158173!2d17.57719339184553!3d43.938046234877554!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x475f0cb0e6289ca7%3A0x664f75f0c1ac1a20!2sSilvija+Strahimira+Kranj%C4%8Devi%C4%87a%2C+Gornji+Vakuf-Uskoplje!5e1!3m2!1sbs!2sba!4v1539322571930\"\r\n    width=\"600\"\r\n    height=\"450\"\r\n    style={{ border: 0 }}\r\n    allowFullScreen=\"\"\r\n    aria-hidden=\"false\"\r\n    tabIndex=\"0\"\r\n    loading=\"lazy\"\r\n  />\r\n);\r\n\r\nexport default Map;\r\n","import React, { useRef, useState } from 'react';\r\nimport emailjs from '@emailjs/browser';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Map from '../components/Map';\r\nimport ToastBar from '../components/ToastBar';\r\n\r\nconst Contact = () => {\r\n  const { t } = useTranslation();\r\n\r\n  const [notification, setNotification] = useState({\r\n    message: '',\r\n    success: '',\r\n  });\r\n\r\n  const snackbarRef = useRef(null);\r\n\r\n  const form = useRef();\r\n\r\n  const sendEmail = (e) => {\r\n    e.preventDefault();\r\n\r\n    emailjs\r\n      .sendForm(\r\n        process.env.REACT_APP_YOUR_SERVICE_ID,\r\n        process.env.REACT_APP_YOUR_TEMPLATE_ID,\r\n        form.current,\r\n        process.env.REACT_APP_YOUR_PUBLIC_KEY\r\n      )\r\n      .then(\r\n        (result) => {\r\n          console.log(result.text);\r\n\r\n          setNotification({\r\n            success: true,\r\n            message: 'Successfully sent an email',\r\n          });\r\n          snackbarRef.current.show();\r\n        },\r\n        (error) => {\r\n          console.log(error.text);\r\n          snackbarRef.current.show();\r\n          setNotification({\r\n            message: 'Error sending email',\r\n            success: false,\r\n          });\r\n        }\r\n      );\r\n  };\r\n\r\n  return (\r\n    <section className=\"docs-main contact\">\r\n      {snackbarRef ? (\r\n        <ToastBar ref={snackbarRef} notification={notification} />\r\n      ) : (\r\n        ''\r\n      )}\r\n      <div className=\"grid-2 \">\r\n        <div className=\"card flex\">\r\n          <Map />\r\n        </div>\r\n        <div className=\"card flex\">\r\n          <div className=\"form card\">\r\n            <h1> {t('contact_title')}</h1>\r\n            <p>\r\n              Mladen Brnas,\r\n              <br /> Silvija Strahimira Kranjčevića,\r\n              <br /> Gornji Vakuf-Uskoplje,\r\n              <br />\r\n              Bosnia and Herzegovina, <br />\r\n              Phone: +387 63 136 095\r\n              <br /> E-mail: endurodriftbosnien@gmail.com\r\n            </p>\r\n            <form ref={form} onSubmit={sendEmail}>\r\n              <div className=\"form-date\">\r\n                {' '}\r\n                <div className=\"date-form\">\r\n                  <div className=\"form-control \">\r\n                    <label htmlFor=\"NAME AND SURNAME\">\r\n                      {t('contact_name')}\r\n                    </label>\r\n                    <input type=\"text\" name=\"user_name\" required />\r\n                  </div>\r\n                </div>\r\n                <div className=\"date-form\">\r\n                  <div className=\"form-control\">\r\n                    <label htmlFor=\"email\">EMAIL</label>\r\n                    <input type=\"email\" name=\"user_email\" required />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"date-form\">\r\n                <label htmlFor=\"message\">{t('contact_msg')}</label>\r\n                <div className=\"form-control\">\r\n                  <textarea name=\"message\" id=\"message\"></textarea>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"date-form\">\r\n                <input\r\n                  type=\"submit\"\r\n                  value={t('contact_btn')}\r\n                  className=\"btn btn-primary\"\r\n                />\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\n/**\n * Initiation\n * @param {string} publicKey - set the EmailJS public key\n * @param {string} origin - set the EmailJS origin\n */\nexport const init = (publicKey, origin = 'https://api.emailjs.com') => {\n    store._userID = publicKey;\n    store._origin = origin;\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, publicKey) => {\n    const uID = publicKey || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.6.2',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, publicKey) => {\n    const uID = publicKey || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.6.2');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n"],"names":["ToastBar","forwardRef","props","ref","useState","showSnackbar","setShowSnackbar","useImperativeHandle","show","setTimeout","className","id","style","backgroundColor","notification","success","message","src","width","height","border","allowFullScreen","tabIndex","loading","t","useTranslation","setNotification","snackbarRef","useRef","form","onSubmit","e","preventDefault","emailjs","process","current","then","result","console","log","text","error","htmlFor","type","name","required","value","store","_origin","validateParams","publicKey","serviceID","templateID","EmailJSResponseStatus","httpResponse","this","status","responseText","sendPost","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","target","responseStatus","open","Object","keys","forEach","key","setRequestHeader","send","init","origin","_userID","templatePrams","uID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","sendForm","currentForm","document","querySelector","nodeName","findHTMLForm","formData","FormData","append"],"sourceRoot":""}